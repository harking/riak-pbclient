= riak

* http://github.com/aitrus/riak-pbclient

== DESCRIPTION:

This is a Ruby client for Riak, using protocol buffers instead of REST.  It offers some benefit in terms of speed and it abstracts Buckets/Keys differently than does the REST client.  Different != Better.

== FEATURES/PROBLEMS:

* It works, which surely counts for something.
* It's still rough around the edges, but certainly usable.  I'm attempting to polish it, though <b>suggestions welcome</b>.
* It can list buckets!  Huzzah!

== SYNOPSIS:

This is a work in progress and I am current improving the rspec and the documentation, but please have fun and give me some feedback.  The below examples 

=== Connect to riak and ping it:

  >> client = Riak::Client.new # Riak::Client.new({:host => "ubuntu01", :port => 1234})
  => #<Riak::Client:0x0000010328a040 @host="127.0.0.1", @port=8087, @w=nil, @dw=nil, @buckets=[], @bucket_cache={}>
  >> client.ping?
  => true

=== List Buckets within riak:
<i>Not for production</i>

  >> client = Riak::Client.new
  => #<Riak::Client:0x00000101439a78 @host="127.0.0.1", @port=8087, @w=nil, @dw=nil, @buckets=[], @bucket_cache={}>
  >> client.buckets
  => ["hb", "goog"]

=== Fetch a Bucket:

  >> bucket = client["goog"]
  => #<Riak::Bucket name=goog, props={n_val=>3, allow_mult=false}>

=== Fetch a Key:

  >> key = bucket["2010-04-12"]
  => #<Riak::Key name="2010-04-12", vclock="k\xCEa```\xCC`\xCA\x05R,\xCC\xF3{*2\x98\x12\x19\xF3X\x19N\xCF\xEB8\xCA\x97\x05\x00", contents=[#<#Riak::RiakContent value={"Date"=>Mon, 12 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="3pbhcnmUtPZvXBSCmo5ESs", links=[], last_mod=1276388043, last_mod_usecs=65345, usermeta={}>]>

=== Fetch a Key's Content:
<i>Differs from the REST client.  Key+RiakContent = ROjbect</i>

  >> rcon = key.content
  => #<#Riak::RiakContent value={"Date"=>Mon, 12 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="3pbhcnmUtPZvXBSCmo5ESs", links=[], last_mod=1276388043, last_mod_usecs=65345, usermeta={}>

=== Play with the RiakContent's data and save it:

  >> rcon.value
  => {"Date"=>Mon, 12 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}
  >> rcon.value.class
  => Hash
  >> rcon.value["Date"]
  => Mon, 12 Apr 2010
  >> rcon.value["Date"] += 1.day
  => Tue, 13 Apr 2010
  >> rcon
  => #<#Riak::RiakContent value={"Date"=>Tue, 13 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="3pbhcnmUtPZvXBSCmo5ESs", links=[], last_mod=1276388043, last_mod_usecs=65345, usermeta={}>
  >> rcon.save
  => true
  >> key = bucket["2010-04-12"]
  => #<Riak::Key name="2010-04-12", vclock="k\xCEa```\xCA`\xCA\x05R,\xCC\xF3{*2\x98\x12\x19\xF3X\x19N\xCF\xEB8\xCA\a\x13\xFE\x9A\xF3\x05*|x)P8\v\x00", contents=[#<#Riak::RiakContent value={"Date"=>Tue, 13 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="2wCEI09OVZEUcHozcm9XCX", links=[], last_mod=1276389827, last_mod_usecs=762316, usermeta={}>]>
  >> rcon = key.content
  => #<#Riak::RiakContent value={"Date"=>Tue, 13 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="2wCEI09OVZEUcHozcm9XCX", links=[], last_mod=1276389827, last_mod_usecs=762316, usermeta={}>
  >> rcon.value["Date"] -= 1.day
  => Mon, 12 Apr 2010
  >> rcon.save
  => true
  >> key = bucket["2010-04-12"]
  => #<Riak::Key name="2010-04-12", vclock="k\xCEa```\xCA`\xCA\x05R,\xCC\xF3{*2\x98\x12\x19\xF3X\x19N\xCF\xEB8\xCA\a\x13\xFE\x9A\xF3\x05(\xCC\x04\x14~\xBC\x14(\x9C\x05\x00", contents=[#<#Riak::RiakContent value={"Date"=>Mon, 12 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="264RmLHrCK89zvhtq4n6Fj", links=[], last_mod=1276389859, last_mod_usecs=810556, usermeta={}>]>
  >> rcon = key.content
  => #<#Riak::RiakContent value={"Date"=>Mon, 12 Apr 2010, "Open"=>"567.35", "High"=>"574.00", "Low"=>"566.22", "Close"=>"572.73", "Volume"=>"2352400", "Adj Close"=>"572.73"}, content_type="application/json", vtag="264RmLHrCK89zvhtq4n6Fj", links=[], last_mod=1276389859, last_mod_usecs=810556, usermeta={}>
  >> 

=== Load the GOOG stocks from the riak Fast Track:

  require 'riak'
  require 'csv'

  client = Riak::Client.new
  bucket = client["goog"]

  CSV.foreach('goog.csv', :headers => true) do |row|
    puts row.first[1].to_s
    key = bucket[row.first[1].to_s]
    key.content.value = Hash[row.to_a]
    key.save
  end

== REQUIREMENTS:

* Rspec 2.0.0.beta.9
* ActiveSupport >= 3.0.0.beta3

== INSTALL:

* Right now, clone this project.  Will have it gem-able in the not too distant future.

== LINKS:

* Riak Fast Track: https://wiki.basho.com/display/RIAK/The+Riak+Fast+Track
* Riak Fast Track GOOG data: https://wiki.basho.com/display/RIAK/Loading+Data+and+Running+MapReduce+Queries
* Ruby Client for Riak's REST Interface: http://github.com/seancribbs/ripple

== THANKS:

This is my first public open source whatever, and I appreciate the people in #riak who tolerated me.

== LICENSE:

  Copyright 2010:
    Scott Gonyea
    Sean Cribbs, Sonian Inc.
    Basho Technologies, Inc.

  The riak-pbclient was pieced together by Scott Gonyea.  Big chunks
  of code were lifted / refactored from the riak-client project, by
  Sean Cribbs.  Lots of pieces are my own work, but it doesn't really
  matter to me.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.